syntax = "proto3";
option go_package = "v1beta1/";
// This service defines the public APIs for remote KMS provider.
service KeyManagementService {
  // Version returns the runtime name and runtime version of the KMS provider.
  rpc Version(VersionRequest) returns (VersionResponse) {}
  // Execute decryption operation in KMS provider.
  rpc Decrypt(DecryptRequest) returns (DecryptResponse) {}
  // Execute encryption operation in KMS provider.
  rpc Encrypt(EncryptRequest) returns (EncryptResponse) {}
  // Check the health of the KMS provider.
  rpc Health(HealthRequest) returns (HealthResponse) {}
}

message VersionRequest {
  // Version of the KMS plugin API.
  string version = 1;
}

message VersionResponse {
  // Version of the KMS plugin API.
  string version = 1;
  // Name of the KMS provider.
  string runtime_name = 2;
  // Version of the KMS provider. The string must be semver-compatible.
  string runtime_version = 3;
}

message DecryptRequest {
  // Version of the KMS plugin API.
  string version = 1;
  // The data to be decrypted.
  bytes cipher = 2;
}

message DecryptResponse {
  // The decrypted data.
  bytes plain = 1;
}

message EncryptRequest {
  // Version of the KMS plugin API.
  string version = 1;
  // The data to be encrypted.
  bytes plain = 2;
}

message EncryptResponse {
  // The encrypted data.
  bytes cipher = 1;
}

message HealthRequest {
  // we don't need parameters
}

message HealthResponse {
  bool healthy = 1;
}
